{
    "version": "https://jsonfeed.org/version/1",
    "title": "Colin Holzman",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "My personal blog.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Colin Holzman",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/2019/07/31/honeymoon",
            "title": "Honeymoon",
            "summary": null,
            "content_text": "Kaitlin and I decided to go to Marseille for our honeymoon. We probably could have started planning earlier, and planned more, but in the end it was an amazing time.Day 1        Kaitlin and I arriving at our AirbnbWe stayed at a wonderful loft apartment hosted by Agnès. It was in a cool old building (like most buildings there) with three or four apartments that Agnès rented out. We arrived at the apartment around 11:00 am. It wasn’t ready yet, but Agnès gave us refreshments (it was hot) and pointed out interesting areas of the city on some maps. As we waited for her to get the apartment ready we walked to a nearby restaurant, Monsieur Madame, for lunch. After lunch we walked to le Vieux-Port de Marseille (the Old Port of Marseille). It’s the main port in the center of the city.        Kaitlin and I under the mirror cieling at le Vieux-PortWe checked out the shops and scenery at la Vieux-Port and then walked back to the apartment to get some rest after a long day travelling.        Kaitlin at the front door of Maison PépouzeWhen we got back to the apartment Agnès had set up our budget air conditioner. It was a frozen water bottle, sitting in a tray to catch the condensation, in front of a fan. This was when it set in that the apartment didn’t have air conditioning and it was in the 90s (30 C). We were tired enough that it didn’t matter.Day 2We woke up with croissants and pain au chocolat (literally chocolate bread but more like chocolate croissants). It’s a French stereotype, but this was a common breakfast over there. We made some espresso, ate, and started getting ready for the day. We started with a short walk to a bus station near the appartment. The bus arrived and I awkwardly bought tickets from the driver (deux billet š’il vous plaît). We rode that bus for a few minutes and got off where we were supposed to transfer to another bus, but we decided to take rental scooters instead. A 15 minute scooter ride and another short bus ride later and we arrived at Callelongue, a small town at the Southern tip of Marseille on the edge of Parc national des Calanques. The calanques are basically narrow, steep walled inlets along the Mediterranean coast. We stopped for some sparkling water and then started hiking.        Kaitlin looking amazing at Parc national des CalanquesWe hiked for a while, relaxed at a secluded beach (Calanque de Marseilleveyre), and then hiked back to Callelongue where we caught the same busses back to the aparment. Later that night we got dinner at a super cute Egyptian restaurant. I had a whole fish.        Kaitlin at La Cantine de Nour d'EgyptDay 3After we woke we walked to a nearby bakery to get the French breakfast. Unfortunately, we were late and they were out of croissants! Oh well. We got a baguette instead. Another French stereotype that is based in at least a little truth is the popularity of the baguette. I guess about one in every four people we saw on the street was carrying or actively eating a baguette. After breakfast we took scooters to MuCEM (Museum of Civilizations of Europe and the Mediterranean). It is a beautiful building in a beautiful location and the exhibits were interesting too.The oldest district in the city, Le Panier, is adjacent to the museum. After we left the museum we walked around Le Panier for a while. Most of Marseille feels old, but Le Panier especially so. The streets are too narrow for cars and mostly paved with blocks. There are a lot of interesting shops and restaurants packed in. We made dinner reservations at a highly rated restaurant Au Coeur du Panier (in the heart of the basket), and then got lunch at an African place, Marafiki Coin Tropical, where the best they had for Kait was some kind of a salad, but I got another whole fish with fried plantains (yum).        Kaitlin at Marafiki Coin TropicalAfter lunch we checked out the nearby mall (Les Terrasses Du Port) which aside from being gigantic was a pretty standard and boring mall. We got ice cream and took the tram back to the apartment for a nap. Later that day we went back down to Le Panier for our dinner. I had Coquilles St Jacques snackées (scallops) and Kait had some kind of cheesy potatoes. A little wandering and a tram ride later and we were back at the apartment for bed.Day 4Croissants for breakfast again, followed by a bus ride to the rental car place to pick up our rental. We had planned a trip for the next day, but were picking up the car a day early. The car we got was a little 5 speed Peugeot that was a blast to drive. Driving in Marseille was nerve wracking, but once we were on the highway it was not very different from driving in the United States. We headed from the car rental to Cassis, a smaller town just east of Marseille. Cassis is known for its wine making and the road overlooking the wineries when driving in was great. We weren’t there for the wine though. We stopped at a store for supplies, found a parking spot as close as possible, and started hiking toward a calanque on the East end of Parc national des Calanques called Calanque d’En-Vau. This calanque is particularly beautiful, but also quite secluded. The hike was long and hot so it felt great to relax on the beach and swim a little.        On the beach at Calanque d'En-VauThe hike back to the car finished us off and we went back to the apartment for sleep. We still hadn’t fully recovered from the flight at this point.Day 5Friday morning we had our typical breakfast of croissants and espresso earlier than usual and then started driving toward Lourmarin, a small town about an hour north of Marseille. In preparation for this trip one of the things we did was watch Anthony Bourdain’s Parts Unknown episode in Marseille. Of course he checks out a lot of restaurants in the city, some of which we also put on our list, but he also rented a car (his car was much cooler than ours) and drove to Lourmarin for the Friday morning market. Driving through the French countryside was a beautiful and fun. The market at Lourmarin was amazing. We bought some gifts for people back home like olive oil, honey, and ginger, and we bought ourselves some treats.        Kaitlin shopping in LourmarinWe said bye to Lourmarin and headed back to Marseille. One of the places Anthony Bourdain recommended was a food truck called Pizza JD. We grabbed some pizza and started driving into the national park to check out Calanque De Morgiou. It took an interesting drive down a narrow, winding mountain road to get there. There was a cute town at the end of the road on the water. We parked there and walked to a private spot on the rocks where we ate our pizza, swam a little, and watched the sunset.        Sunset at Calanque De MorgiouDay 6On day 6 we dropped the car off and walked around the Basilique Notre-Dame-de-la-Garde. It’s a giant, old curch on a hight point. There are small model boats hanging from the ceiling inside. I guess sailors used to leave them as tribute to the mother of Christ who saved them from shipwreck. Notre-Dame-de-la-Garde still has bullet holes from WW2.        View from Notre-Dame-de-la-GardeDay 7Day 7 was spent mostly walking around the area around Vieux Port. We got lunch at another Anthony Bourdain recommended restaurant Le Fémina.Day 8This was the most interesting day for me. We had our usual breakfast at the apartment, took the tram to Vieux-Port, had second breakfast at a cute little cafe overlooking the port, and then boarded the Goelette Alliance.        On the Goelette AllianceThe Alliance is an old fishing boat turned sail boat that goes out for tours of the Mediterranean coast near Marseille. We set out, motoring and not sailing, around 10:30 am and headed east. At about 1 pm we arrived at Calanque de Sugiton. The Alliance provided a tasty cold lunch and we took some time to swim. At this point in the trip the temperature had dropped a lot and the water was now too cool for me, but I did get in for at least a few seconds.        On the Goelette AllianceAfter the break we started heading back to Marseille. On the way we passed close to Château d’If, where part of the novel The Count of Monte Cristo was set. Later that night we failed a second time to eat at Bourdain’s recommended Cafe de L’Abbaye (didn’t serve dinner) so we got Italian instead.Day 10Day 10 was mostly spent finding gifts for people back home. We got some cool prints from Le Typo du Panier and a few bottles of wine from Cassis. Finally we were able to get lunch at Cafe de L’Abbaye. That night we packed up for the trip back home.Marseille is a great place to visit. I would highly recommend checking it out. Thanks for reading.See more photos here.",
            "content_html": "<p>Kaitlin and I decided to go to Marseille for our honeymoon. We probably could have started planning earlier, and planned more, but in the end it was an amazing time.</p><h1 id=\"day-1\">Day 1</h1><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-22-Just-Arrived-in-Marseille.jpg\" alt=\"Kaitlin and I arriving at our Airbnb\" />    <figcaption>Kaitlin and I arriving at our Airbnb</figcaption></figure><p>We stayed at a wonderful <a href=\"https://www.airbnb.com/rooms/18008888?s=67&amp;shared_item_type=1&amp;virality_entry_point=1&amp;sharer_id=240584451&amp;unique_share_id=5d008c1b-dc50-45c3-afd4-12a609dc6f14\">loft apartment</a> hosted by Agnès. It was in a cool old building (like most buildings there) with three or four apartments that Agnès rented out. We arrived at the apartment around 11:00 am. It wasn’t ready yet, but Agnès gave us refreshments (it was <strong>hot</strong>) and pointed out interesting areas of the city on some maps. As we waited for her to get the apartment ready we walked to a nearby restaurant, <a href=\"https://www.facebook.com/Monsieur-Madame-853998998003356/\">Monsieur Madame</a>, for lunch. After lunch we walked to le Vieux-Port de Marseille (the Old Port of Marseille). It’s the main port in the center of the city.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-22-Vieux-Port-Mirror-Ceiling.jpg\" alt=\"Kaitlin and I under the mirror cieling at le Vieux-Port\" />    <figcaption>Kaitlin and I under the mirror cieling at le Vieux-Port</figcaption></figure><p>We checked out the shops and scenery at la Vieux-Port and then walked back to the apartment to get some rest after a long day travelling.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-22-Marseille-Airbnb-Front-Door.jpg\" alt=\"Kaitlin at the front door of Maison Pépouze\" />    <figcaption>Kaitlin at the front door of Maison Pépouze</figcaption></figure><p>When we got back to the apartment Agnès had set up our budget air conditioner. It was a frozen water bottle, sitting in a tray to catch the condensation, in front of a fan. This was when it set in that the apartment didn’t have air conditioning and it was in the 90s (30 C). We were tired enough that it didn’t matter.</p><h1 id=\"day-2\">Day 2</h1><p>We woke up with croissants and pain au chocolat (literally chocolate bread but more like chocolate croissants). It’s a French stereotype, but this was a common breakfast over there. We made some espresso, ate, and started getting ready for the day. We started with a short walk to a bus station near the appartment. The bus arrived and I awkwardly bought tickets from the driver (deux billet š’il vous plaît). We rode that bus for a few minutes and got off where we were supposed to transfer to another bus, but we decided to take rental scooters instead. A 15 minute scooter ride and another short bus ride later and we arrived at Callelongue, a small town at the Southern tip of Marseille on the edge of Parc national des Calanques. The calanques are basically narrow, steep walled inlets along the Mediterranean coast. We stopped for some sparkling water and then started hiking.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-23-Hiking-in-the-Calanques.jpg\" alt=\"Kaitlin looking amazing at Parc national des Calanques\" />    <figcaption>Kaitlin looking amazing at Parc national des Calanques</figcaption></figure><p>We hiked for a while, relaxed at a secluded beach (Calanque de Marseilleveyre), and then hiked back to Callelongue where we caught the same busses back to the aparment. Later that night we got dinner at a super cute Egyptian restaurant. I had a whole fish.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-23-La-Cantine-de-Nour-d'Egypte.jpg\" alt=\"Kaitlin at La Cantine de Nour d'Egypt\" />    <figcaption>Kaitlin at La Cantine de Nour d'Egypt</figcaption></figure><h1 id=\"day-3\">Day 3</h1><p>After we woke we walked to a nearby bakery to get the French breakfast. Unfortunately, we were late and they were out of croissants! Oh well. We got a baguette instead. Another French stereotype that is based in at least a little truth is the popularity of the baguette. I guess about one in every four people we saw on the street was carrying or actively eating a baguette. After breakfast we took scooters to MuCEM (Museum of Civilizations of Europe and the Mediterranean). It is a beautiful building in a beautiful location and the exhibits were interesting too.</p><p>The oldest district in the city, Le Panier, is adjacent to the museum. After we left the museum we walked around Le Panier for a while. Most of Marseille feels old, but Le Panier especially so. The streets are too narrow for cars and mostly paved with blocks. There are a lot of interesting shops and restaurants packed in. We made dinner reservations at a highly rated restaurant Au Coeur du Panier (in the heart of the basket), and then got lunch at an African place, Marafiki Coin Tropical, where the best they had for Kait was some kind of a salad, but I got another whole fish with fried plantains (yum).</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-24-Kaitlin-at-Marafiki-Coin-Tropical.jpg\" alt=\"Kaitlin at Marafiki Coin Tropical\" />    <figcaption>Kaitlin at Marafiki Coin Tropical</figcaption></figure><p>After lunch we checked out the nearby mall (Les Terrasses Du Port) which aside from being gigantic was a pretty standard and boring mall. We got ice cream and took the tram back to the apartment for a nap. Later that day we went back down to Le Panier for our dinner. I had Coquilles St Jacques snackées (scallops) and Kait had some kind of cheesy potatoes. A little wandering and a tram ride later and we were back at the apartment for bed.</p><h1 id=\"day-4\">Day 4</h1><p>Croissants for breakfast again, followed by a bus ride to the rental car place to pick up our rental. We had planned a trip for the next day, but were picking up the car a day early. The car we got was a little 5 speed Peugeot that was a blast to drive. Driving in Marseille was nerve wracking, but once we were on the highway it was not very different from driving in the United States. We headed from the car rental to Cassis, a smaller town just east of Marseille. Cassis is known for its wine making and the road overlooking the wineries when driving in was great. We weren’t there for the wine though. We stopped at a store for supplies, found a parking spot as close as possible, and started hiking toward a calanque on the East end of Parc national des Calanques called Calanque d’En-Vau. This calanque is particularly beautiful, but also quite secluded. The hike was long and hot so it felt great to relax on the beach and swim a little.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-25-Relaxing-in-the-Calanques.jpg\" alt=\"On the beach at Calanque d'En-Vau\" />    <figcaption>On the beach at Calanque d'En-Vau</figcaption></figure><p>The hike back to the car finished us off and we went back to the apartment for sleep. We still hadn’t fully recovered from the flight at this point.</p><h1 id=\"day-5\">Day 5</h1><p>Friday morning we had our typical breakfast of croissants and espresso earlier than usual and then started driving toward Lourmarin, a small town about an hour north of Marseille. In preparation for this trip one of the things we did was watch Anthony Bourdain’s Parts Unknown episode in Marseille. Of course he checks out a lot of restaurants in the city, some of which we also put on our list, but he also rented a car (his car was much cooler than ours) and drove to Lourmarin for the Friday morning market. Driving through the French countryside was a beautiful and fun. The market at Lourmarin was amazing. We bought some gifts for people back home like olive oil, honey, and ginger, and we bought ourselves some treats.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-26-Lourmarin-Market.jpg\" alt=\"Kaitlin shopping in Lourmarin\" />    <figcaption>Kaitlin shopping in Lourmarin</figcaption></figure><p>We said bye to Lourmarin and headed back to Marseille. One of the places Anthony Bourdain recommended was a food truck called Pizza JD. We grabbed some pizza and started driving into the national park to check out Calanque De Morgiou. It took an interesting drive down a narrow, winding mountain road to get there. There was a cute town at the end of the road on the water. We parked there and walked to a private spot on the rocks where we ate our pizza, swam a little, and watched the sunset.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-26-Calanque-Sunset.jpg\" alt=\"Sunset at Calanque De Morgiou\" />    <figcaption>Sunset at Calanque De Morgiou</figcaption></figure><h1 id=\"day-6\">Day 6</h1><p>On day 6 we dropped the car off and walked around the Basilique Notre-Dame-de-la-Garde. It’s a giant, old curch on a hight point. There are small model boats hanging from the ceiling inside. I guess sailors used to leave them as tribute to the mother of Christ who saved them from shipwreck. Notre-Dame-de-la-Garde still has bullet holes from WW2.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-27-Notre-Dame-de-la-Garde.jpg\" alt=\"View from Notre-Dame-de-la-Garde\" />    <figcaption>View from Notre-Dame-de-la-Garde</figcaption></figure><h1 id=\"day-7\">Day 7</h1><p>Day 7 was spent mostly walking around the area around Vieux Port. We got lunch at another Anthony Bourdain recommended restaurant Le Fémina.</p><h1 id=\"day-8\">Day 8</h1><p>This was the most interesting day for me. We had our usual breakfast at the apartment, took the tram to Vieux-Port, had second breakfast at a cute little cafe overlooking the port, and then boarded the Goelette Alliance.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-29-Kaitlin-Sailing.jpg\" alt=\"On the Goelette Alliance\" />    <figcaption>On the Goelette Alliance</figcaption></figure><p>The Alliance is an old fishing boat turned sail boat that goes out for tours of the Mediterranean coast near Marseille. We set out, motoring and not sailing, around 10:30 am and headed east. At about 1 pm we arrived at Calanque de Sugiton. The Alliance provided a tasty cold lunch and we took some time to swim. At this point in the trip the temperature had dropped a lot and the water was now too cool for me, but I did get in for at least a few seconds.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-29-Colin-and-Kaitlin-Sailing.jpg\" alt=\"On the Goelette Alliance\" />    <figcaption>On the Goelette Alliance</figcaption></figure><p>After the break we started heading back to Marseille. On the way we passed close to Château d’If, where part of the novel The Count of Monte Cristo was set. Later that night we failed a second time to eat at Bourdain’s recommended Cafe de L’Abbaye (didn’t serve dinner) so we got Italian instead.</p><h1 id=\"day-10\">Day 10</h1><p>Day 10 was mostly spent finding gifts for people back home. We got some cool prints from Le Typo du Panier and a few bottles of wine from Cassis. Finally we were able to get lunch at Cafe de L’Abbaye. That night we packed up for the trip back home.</p><p>Marseille is a great place to visit. I would highly recommend checking it out. Thanks for reading.</p><p>See more photos <a href=\"/gallery\">here</a>.</p>",
            "url": "http://localhost:4000/2019/07/31/honeymoon",
            
            
            
            "tags": ["self","wedding","wife","family","honeymoon","vacation","france"],
            
            "date_published": "2019-07-31T00:00:00-04:00",
            "date_modified": "2019-07-31T00:00:00-04:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/07/20/wedding",
            "title": "Wedding",
            "summary": null,
            "content_text": "I proposed to Kaitlin around the middle of August 2018. I was nervous. Thankfully she said yes. I wasn’t surprised; we had discussed marriage. I had asked her dad for permission the previous day so I think she saw it coming. We decided to have the wedding in the Summer of 2019 and started looking for locations immediately.        Kaitlin and I at Cliff Bells not long after getting engagedWe looked at a few locations and decided to have the wedding and reception at the Scarab Club in Detroit. It’s an awesome art gallery right behind the DIA.        Scarab Club front doorWe have all heard nightmare stories about wedding planning, but I am lucky and Kaitlin is amazing. She handled mostly everything with relatively little stress. It all came together just right as the day approached.        Invite and ringsFinally the day had arrived. When we first visited the gallery the exhibit was photos of gross conditions in restaurants taken by a former health inspector. It was interesting but not wedding material. Fortunately the exhibit for our day was more appropriate:        Wedding day exhibitKaitlin’s day started earlier than mine. She had a lot more preparation to do. She had her hair, makeup, and nails done and arrived at the Scarab Club looking beautiful and started the finishing touches.        Kaitlin getting ready        Still getting ready...        Ready!I arrived shortly after she did and after I nervously helped set up tables and chairs I too went upstairs to get ready.        My dad helping with my cuff linksWhen we were both ready I waited in the lounge for Kaitlin so we could get some first look photos. I couldn’t believe my eyes! She was even more stunning than usual. These are some of our favorite photos from the day.        First lookThen it was time for the ceremony. All our guests were seated in the garden, and our amazing officiant Josh was waiting at the altar. We hadn’t rehearsed anything, but even so the ceremony went smoothly. We started the music (La Vie En Rose by Louis Armstrong), I walked out and down to Josh, then Kaitlin’s dad guided her to me.        Beginning of the ceremonyJosh had a few well chosen words, Kaitlin and I exchanged vows and rings, and then we kissed as husband and wife!        Husband and wifeAfter the ceremony Kaitlin and I signed our marriage certificate and took some time for family photos. When we were done with that we made our entrance to the gallery as husband and wife and we each had a glass of sparkling juice. Then our friend Ang announced our first dance and started the music (Never In My Wildest Dreams by Dan Aurbach) and we started our dance. This was one of the best parts of the day for me. A friend had taught us a few rumba moves to do and we had a blast showing off to everyone. It was very special.        First danceThen Kaitlin danced with her dad and I danced with my mom.        Father daughter dance        Mother son danceAfter the special dances we all went upstairs to the lounge for cake. Our cake was a two tier plain cheesecake accompanied by raspberry and fudge swirl cheesecakes. It was amazing. I was tempted to smash a piece in Kait’s face, but I was chicken.        Cake cuttingI was very nervous for everything up to this point. It felt like a performance that Kait and I were putting on. We planned and practiced which helped me feel more confident but that feeling never left. After cutting the cake I felt relief that the scripted part of the day was over. The rest of the night was the best party I have ever been to. We danced, talked, laughed, and cried. It was the best day of my life by far.        Dancing        Dancing        DancingThere are more pictures here. Thanks for reading.",
            "content_html": "<p>I proposed to Kaitlin around the middle of August 2018. I was nervous. Thankfully she said yes. I wasn’t surprised; we had discussed marriage. I had asked her dad for permission the previous day so I think she saw it coming. We decided to have the wedding in the Summer of 2019 and started looking for locations immediately.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2018-10-31-Colin-and-Kaitlin.jpg\" alt=\"Kaitlin and I at Cliff Bells not long after getting engaged\" />    <figcaption>Kaitlin and I at Cliff Bells not long after getting engaged</figcaption></figure><p>We looked at a few locations and decided to have the wedding and reception at the Scarab Club in Detroit. It’s an awesome art gallery right behind the DIA.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Scarab-Club.jpg\" alt=\"Scarab Club front door\" />    <figcaption>Scarab Club front door</figcaption></figure><p>We have all heard nightmare stories about wedding planning, but I am lucky and Kaitlin is amazing. She handled mostly everything with relatively little stress. It all came together just right as the day approached.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Invite.jpg\" alt=\"Invite and rings\" />    <figcaption>Invite and rings</figcaption></figure><p>Finally the day had arrived. When we first visited the gallery the exhibit was photos of gross conditions in restaurants taken by a former health inspector. It was interesting but not wedding material. Fortunately the exhibit for our day was more appropriate:</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Scarab-Club-Gallery.jpg\" alt=\"Wedding day exhibit\" />    <figcaption>Wedding day exhibit</figcaption></figure><p>Kaitlin’s day started earlier than mine. She had a lot more preparation to do. She had her hair, makeup, and nails done and arrived at the Scarab Club looking beautiful and started the finishing touches.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Kaitlin-getting-ready.jpg\" alt=\"Kaitlin getting ready\" />    <figcaption>Kaitlin getting ready</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Kaitlin-getting-ready-2.jpg\" alt=\"Still getting ready...\" />    <figcaption>Still getting ready...</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Kaitlin.jpg\" alt=\"Ready!\" />    <figcaption>Ready!</figcaption></figure><p>I arrived shortly after she did and after I nervously helped set up tables and chairs I too went upstairs to get ready.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Colin-and-father-getting-ready.jpg\" alt=\"My dad helping with my cuff links\" />    <figcaption>My dad helping with my cuff links</figcaption></figure><p>When we were both ready I waited in the lounge for Kaitlin so we could get some first look photos. I couldn’t believe my eyes! She was even more stunning than usual. These are some of our favorite photos from the day.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-First-look-2.jpg\" alt=\"First look\" />    <figcaption>First look</figcaption></figure><p>Then it was time for the ceremony. All our guests were seated in the garden, and our amazing officiant Josh was waiting at the altar. We hadn’t rehearsed anything, but even so the ceremony went smoothly. We started the music (La Vie En Rose by Louis Armstrong), I walked out and down to Josh, then Kaitlin’s dad guided her to me.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Altar-2.jpg\" alt=\"Beginning of the ceremony\" />    <figcaption>Beginning of the ceremony</figcaption></figure><p>Josh had a few well chosen words, Kaitlin and I exchanged vows and rings, and then we kissed as husband and wife!</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Altar-3.jpg\" alt=\"Husband and wife\" />    <figcaption>Husband and wife</figcaption></figure><p>After the ceremony Kaitlin and I signed our marriage certificate and took some time for family photos. When we were done with that we made our entrance to the gallery as husband and wife and we each had a glass of sparkling juice. Then our friend Ang announced our first dance and started the music (Never In My Wildest Dreams by Dan Aurbach) and we started our dance. This was one of the best parts of the day for me. A friend had taught us a few rumba moves to do and we had a blast showing off to everyone. It was very special.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-First-dance.jpg\" alt=\"First dance\" />    <figcaption>First dance</figcaption></figure><p>Then Kaitlin danced with her dad and I danced with my mom.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Father-daughter-dance.jpg\" alt=\"Father daughter dance\" />    <figcaption>Father daughter dance</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Mother-son-dance.jpg\" alt=\"Mother son dance\" />    <figcaption>Mother son dance</figcaption></figure><p>After the special dances we all went upstairs to the lounge for cake. Our cake was a two tier plain cheesecake accompanied by raspberry and fudge swirl cheesecakes. It was amazing. I was tempted to smash a piece in Kait’s face, but I was chicken.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Cake.jpg\" alt=\"Cake cutting\" />    <figcaption>Cake cutting</figcaption></figure><p>I was very nervous for everything up to this point. It felt like a performance that Kait and I were putting on. We planned and practiced which helped me feel more confident but that feeling never left. After cutting the cake I felt relief that the scripted part of the day was over. The rest of the night was the best party I have ever been to. We danced, talked, laughed, and cried. It was the best day of my life by far.</p><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Angela-Kaitlin-Colin-Erich.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Ang-Drew-Kaitlin-Angela-Julia.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/1024/2019-07-20-Tina-Dustin-Drew-Erich-Colin-Kaitlin.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><p>There are more pictures <a href=\"/gallery\">here</a>. Thanks for reading.</p>",
            "url": "http://localhost:4000/2019/07/20/wedding",
            
            
            
            "tags": ["self","wedding","wife","family"],
            
            "date_published": "2019-07-20T00:00:00-04:00",
            "date_modified": "2019-07-20T00:00:00-04:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/04/22/jekyll-and-pig",
            "title": "Jekyll and pig.js",
            "summary": null,
            "content_text": "Photo GalleryI tried using Jekyll Lens for a photo gallery on colinholzman.xyz. It worked and was easy to use but was not exactly what I wanted. While looking for a better method I came across this post by Sergio Basurco. In it he describes how he modified the Jekyll Photo Gallery plugin to use pig.js for loading images. Pig.js is a simple and lightweight JavaScript library to enable progressive loading of images as the user scrolls to them. The example is exactly the effect that I was looking for.Generating AssetsPig.js expects to be able to load various sizes for each image. To do this the we must store the images in a manner that allows the pig.js function urlForSize to return the path to the image of a given size. I have chosen to store my images like so:├── assets│   ├── img│   │   ├── 20│   │   |   ├── blue.jpg│   │   |   ...│   │   ├── 100│   │   |   ├── red.jpg│   │   |   ...│   │   ├── 250│   │   |   ├── green.jpg│   │   |   ...│   │   ├── 500│   │   │   ├── blue.jpg...Since my goal is to display potentially hundreds of images like this I need a tool to resize them all and generate the directory structure above.gallerybuildergallerybuilder is a simple python script I wrote to take a directory full of photos, resize them all to the sizes required by pig.js, and generate the html for my gallery page. It’s a rough draft for now but it does the trick.Adding linksOne last thing I did to enhance the gallery experience is make each image a link to a full size version. To get the link to the full size image I call urlForSize with size equal to 1024. Therefore when creating thumbnail images for the assets folder we have to create sizes 20, 100, 250, 500, (for original pig.js) and 1024 (for full size link). You can see the simple change to pig.js here.ResultYou can see what this looks like on my site here. TODO: add a lot more photos.",
            "content_html": "<h2 id=\"photo-gallery\">Photo Gallery</h2><p>I tried using <a href=\"https://github.com/ElasticDesigns/jekyll-lens\">Jekyll Lens</a> for a photo gallery on <a href=\"https://colinholzman.xyz\">colinholzman.xyz</a>. It worked and was easy to use but was not exactly what I wanted. While looking for a better method I came across <a href=\"https://chuckleplant.github.io/2018/08/06/pig-img-gallery.html\">this</a> post by Sergio Basurco. In it he describes how he modified the <a href=\"https://github.com/aerobless/jekyll-photo-gallery\">Jekyll Photo Gallery</a> plugin to use <a href=\"https://github.com/schlosser/pig.js\">pig.js</a> for loading images. Pig.js is a simple and lightweight JavaScript library to enable progressive loading of images as the user scrolls to them. The <a href=\"https://feeding.schlosser.io/\">example</a> is exactly the effect that I was looking for.</p><h2 id=\"generating-assets\">Generating Assets</h2><p>Pig.js expects to be able to load various sizes for each image. To do this the we must store the images in a manner that allows the pig.js function <code>urlForSize</code> to return the path to the image of a given size. I have chosen to store my images like so:</p><pre><code>├── assets│   ├── img│   │   ├── 20│   │   |   ├── blue.jpg│   │   |   ...│   │   ├── 100│   │   |   ├── red.jpg│   │   |   ...│   │   ├── 250│   │   |   ├── green.jpg│   │   |   ...│   │   ├── 500│   │   │   ├── blue.jpg...</code></pre><p>Since my goal is to display potentially hundreds of images like this I need a tool to resize them all and generate the directory structure above.</p><h2 id=\"gallerybuilder\">gallerybuilder</h2><p><a href=\"https://github.com/clnhlzmn/gallerybuilder/blob/master/main.py\">gallerybuilder</a> is a simple python script I wrote to take a directory full of photos, resize them all to the sizes required by pig.js, and generate the html for my gallery page. It’s a rough draft for now but it does the trick.</p><h2 id=\"adding-links\">Adding links</h2><p>One last thing I did to enhance the gallery experience is make each image a link to a full size version. To get the link to the full size image I call <code>urlForSize</code> with size equal to 1024. Therefore when creating thumbnail images for the assets folder we have to create sizes 20, 100, 250, 500, (for original pig.js) and 1024 (for full size link). You can see the simple change to pig.js <a href=\"https://github.com/schlosser/pig.js/compare/master...clnhlzmn:master#diff-ded216d1d585dc143459a4bdbbed4626R785\">here</a>.</p><h2 id=\"result\">Result</h2><p>You can see what this looks like on my site <a href=\"https://colinholzman.xyz/gallery\">here</a>. TODO: add a lot more photos.</p>",
            "url": "http://localhost:4000/2019/04/22/jekyll-and-pig",
            
            
            
            "tags": ["website","blog","jekyll"],
            
            "date_published": "2019-04-22T09:00:00-04:00",
            "date_modified": "2019-04-22T09:00:00-04:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/04/17/copper-kitten",
            "title": "CopperKitten",
            "summary": null,
            "content_text": "CopperKitten is an exercise in programming language and runtime design and implementation. Check out the code here and read on for more explanation.This project is far from complete. It will probably never be fully complete. I have a few features that I would like to implement before I put it aside. I am writing this post to introduce what I have done so far and invite comments and discussion.CK is a simple functional language with Hindley Milner type inference. Its compiler and assembler are currently implemented in Kotlin. The compiler (ckc), for now, compiles a single ‘script’ file to its corresponding portable assembly listing, and then the assembler (cka) assembles that listing to a portable C99 program. An example of this can be seen in the makefile here. Using the makefile requires java and gcc. The script simple_io.ck is intended to illustrate features of the language that have been implemented so far.The LanguageBuilt-in TypesThere are three built in types in CK: Unit, Int, and Fun(A, ..., R). The first is the usual unit type with exactly one value. The second is a signed integer implemented by the C type intptr_t. The third type Fun(A, ..., R) is the function type where A, ... represents argument types and R is the return type. The function type can also be written as (A, ...) R.User Defined TypesUsers can define their own types using a type ... declaration at the beginning of a CK file. For example the declaration type List = (A) nil() | cons(A, List(A)) creates the type List(A) where A can be any type. User defined types are implemented as a number of compiler generated functions. Pattern matching, when implemented, will use these functions behind the scenes. Until then, the programmer can use them to construct and deconstruct values of user defined types.CK ProgramsFor now a CK program consists of a single .ck file. A .ck file is zero or more declarations followed by an expression. In the grammar there are two types of declaration, but for now only typeDecl is implemented. The type declarations cause a number of functions to be implemented by the compiler for use in the following expression. Evaluation of the expression in the .ck file is evaluation of the CK program. In the future I would like to add support for multiple files.ExpressionsThe grammar of expressions includes      unit    ()        integers    0, 1, 1000000000000000        all the usual unary and binary operations on integers    a + b, -42, a || (b &lt;&gt; c)    All unary and binary operators take arguments of type Int and return values of type Int        functions    (a) a, (a, b) a + b, (n) n * n    CK supports limited tail call optimization. For a function call in tail position, if the callee has the same number of arguments as the caller, then the stack frame is reused, otherwise the call will create a new stack frame.        function applications    id(42), add(1, 2), map(aList, (e) e * e)    CK uses eager evaluation.        two forms of conditional expression    cond() ? true() : false()    if (cond()) true() else false()    if (cond()) true()    Consequent and alternate expressions of a conditional expression must have the same type. An if without an else has type Unit (that means the consequent must have type Unit). Condition expressions must have type Int where 0 is false and 1 is true, for now. I intend to add a true boolean type at some point.        sequence expressions    { a; b }    a is evaluated and its result discarded, then b is evaluated and its value is the value of { a; b }.        and let expressions    let id = (a) a, let rec forever = (f) { f(); forever(f) }, { let id = (a) a; id(42) }    The scope of a let expression is the rest of the expressions in its enclosing sequence. That is {let id = (a) a; id(42)} can be thought of as let id = (a) a in id(42).        tuples and strings are included in the grammar, but they’re not yet implemented  Note that type annotations are not required. For clarity the programmer can annotate the types of let bound variables, functions parameters, and function return types using the : T syntax. For example let id: (A) A = (a: A):A a. Type annotations are not yet fully implemented, but it should be an easy feature to finish. At the moment there are not any situations that require annotations. I would like to add record types and corresponding accessor syntax such as a.b which will, as far as I know, require limited type annotations.C Language BindingsAnother type of function expression is cfun. These can be used any place an ordinary function expression can be used. cfun is used to create a binding to a function defined in C for doing IO and whatever else you would rather do in C. In the example there are two cfuns that are used to read and write characters on stdout/stdin. A cfun looks like cfun id Type where id is the identifier that matches the identifier of the function in C and Type is the type of that function. The native_read and native_write functions are implemented here. The file that defines the native functions must be compiled and linked with the output from ckc/cka (this is illustrated here).ImplementationThe implementation of CK includes a compiler, assembler, and runtime.CompilerThe CK compiler (ckc) takes a single file (program.ck) and compiles it to a CK assembly file (program.cka). Compilation proceeds in a few steps:      Parse program.ck using ANTLR4.    ANTLR4 generates the classes required to parse a CK file based on the grammar ck.g4.        Convert the ast that is produced by ANTLR to a simpler ast that is easier to work with.    The class CkBaseVisitor (generated by ANTLR) is extended here to convert the ANTLR generated ast into a simpler representation. The CkBaseVisitor extensions are used to parse program.ck here and return the simpler ast.        Type check the program.    Type checking is implemented here. The type checker is based on the example implementation at the end of “Basic Polymorphic Typechecking” by Luca Cardelli.        Compile the program.    Compilation is done by the CompilationVisitor class. For now this amounts to visiting the ast and returning a list of assembler instructions.  The command line option parser is used when ckc is invoked on the command line. It parses command line options, reads the input file, performs the compilation steps above, and writes the output to the specified output file.AssemblerThe CK assembler (cka) takes a single program.cka file and converts it to a C99 file. The main task of the assembler is to convert the abstract assembler syntax into a list of concrete bytecodes and literal values to be consumed by the runtime vm. Part of cka’s task is to generate layout functions to be used by the memory management scheme to identify pointers on the stack and in heap allocated objects. Another thing that the assembler does is combine the program bytecode array, generated functions, and other supporting pieces together into a .c file with a main function that initializes the CK runtime and starts execution.I won’t go into too much detail on cka here unless there is interest. It’s pretty boring and mostly self explanatory.The output of cka must be compiled and linked with any files containing definitions of cfuns and with the chosen garbage collection implementation file (one of copying_gc.c, incremental_gc.c, or mark_compact_gc.c). Again, the example makefile demonstrates this.RuntimeThe CK runtime is a simple bytecode interpreter combined with one of three tracing garbage collection implementations. I could have implemented CK by compiling directly to C, rather than using a vm, but I wanted to be able to support tail call optimization and I couldn’t see how to do that in plain C.VMThe CK vm is implemented by vm.h. Opcodes are enumerated in the type enum vm_op_code and are reasonably well documented there. In addition to the usual arithmetic operations there are some for control flow, stack frame management, memory allocation, storing/loading values to/from indices into heap objects/stack frames/function arguments/function captures, and some other miscellaneous operations. Program execution is done by the function vm_execute which simply iterates over the given program array dispatching on each op code.Memory ManagementThere are two copying collectors (one incremental) and one mark compact. I hope they can be used as examples for people who are curious about how garbage collection works. The garbage collectors all depend on gc_interface.h which declares a common set of functions with which the vm can interface with the heap memory. There are probably subtle bugs in the implementations of the garbage collectors. I am most confident in the correctness of the simple copying collector, least confident in the incremental copying collector, and the mark compact collector is somewhere in between.Future WorkThis is work that I would like to do on this project in the future.      clean up, organize, and simplify: compiler, assembler, and runtime source files        integrate programmer type annotations with type checker        strings and tuples        pattern matching on instances of user defined types        modules        implement parser and CLI in Kotlin (removing ANTLR and Apache CLI dependencies)        implement compiler and assembler in functional language like ML (or at least in a functional style in Kotlin)        implement compiler and assembler in CK        generate machine code rather than C99        optimize polymorphic functions to not always use boxed types for integers        lots of other optimizations  Thanks for making it this far! Let me know what you think with a comment below.",
            "content_html": "<p>CopperKitten is an exercise in programming language and runtime design and implementation. Check out the code <a href=\"https://github.com/clnhlzmn/CopperKitten\">here</a> and read on for more explanation.</p><p>This project is far from complete. It will probably never be fully complete. I have a few features that I would like to implement before I put it aside. I am writing this post to introduce what I have done so far and invite comments and discussion.</p><p>CK is a simple functional language with Hindley Milner type inference. Its compiler and assembler are currently implemented in Kotlin. The compiler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/\">ckc</a>), for now, compiles a single ‘script’ file to its corresponding portable assembly listing, and then the assembler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/\">cka</a>) assembles that listing to a portable C99 program. An example of this can be seen in the makefile <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">here</a>. Using the makefile requires java and gcc. The script <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/simple_io.ck\">simple_io.ck</a> is intended to illustrate features of the language that have been implemented so far.</p><h2 id=\"the-language\">The Language</h2><h3 id=\"built-in-types\">Built-in Types</h3><p>There are three built in types in CK: <code>Unit</code>, <code>Int</code>, and <code>Fun(A, ..., R)</code>. The first is the usual unit type with exactly one value. The second is a signed integer implemented by the C type <code>intptr_t</code>. The third type <code>Fun(A, ..., R)</code> is the function type where <code>A, ...</code> represents argument types and <code>R</code> is the return type. The function type can also be written as <code>(A, ...) R</code>.</p><h3 id=\"user-defined-types\">User Defined Types</h3><p>Users can define their own types using a <code>type ...</code> declaration at the beginning of a CK file. For example the declaration <code>type List = (A) nil() | cons(A, List(A))</code> creates the type <code>List(A)</code> where <code>A</code> can be any type. User defined types are implemented as a number of compiler generated functions. Pattern matching, when implemented, will use these functions behind the scenes. Until then, the programmer can use them to construct and deconstruct values of user defined types.</p><h3 id=\"ck-programs\">CK Programs</h3><p>For now a CK program consists of a single .ck file. A .ck file is zero or more declarations followed by an expression. In the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/grammar/ck.g4\">grammar</a> there are two types of declaration, but for now only <code>typeDecl</code> is implemented. The type declarations cause a number of functions to be implemented by the compiler for use in the following expression. Evaluation of the expression in the .ck file is evaluation of the CK program. In the future I would like to add support for multiple files.</p><h3 id=\"expressions\">Expressions</h3><p>The grammar of expressions includes</p><ul>  <li>    <p>unit</p>    <p><code>()</code></p>  </li>  <li>    <p>integers</p>    <p><code>0</code>, <code>1</code>, <code>1000000000000000</code></p>  </li>  <li>    <p>all the usual unary and binary operations on integers</p>    <p><code>a + b</code>, <code>-42</code>, <code>a || (b &lt;&gt; c)</code></p>    <p>All unary and binary operators take arguments of type <code>Int</code> and return values of type <code>Int</code></p>  </li>  <li>    <p>functions</p>    <p><code>(a) a</code>, <code>(a, b) a + b</code>, <code>(n) n * n</code></p>    <p>CK supports limited tail call optimization. For a function call in tail position, if the callee has the same number of arguments as the caller, then the stack frame is reused, otherwise the call will create a new stack frame.</p>  </li>  <li>    <p>function applications</p>    <p><code>id(42)</code>, <code>add(1, 2)</code>, <code>map(aList, (e) e * e)</code></p>    <p>CK uses eager evaluation.</p>  </li>  <li>    <p>two forms of conditional expression</p>    <p><code>cond() ? true() : false()</code></p>    <p><code>if (cond()) true() else false()</code></p>    <p><code>if (cond()) true()</code></p>    <p>Consequent and alternate expressions of a conditional expression must have the same type. An <code>if</code> without an <code>else</code> has type <code>Unit</code> (that means the consequent must have type <code>Unit</code>). Condition expressions must have type <code>Int</code> where 0 is false and 1 is true, for now. I intend to add a true boolean type at some point.</p>  </li>  <li>    <p>sequence expressions</p>    <p><code>{ a; b }</code></p>    <p><code>a</code> is evaluated and its result discarded, then <code>b</code> is evaluated and its value is the value of <code>{ a; b }</code>.</p>  </li>  <li>    <p>and let expressions</p>    <p><code>let id = (a) a</code>, <code>let rec forever = (f) { f(); forever(f) }</code>, <code>{ let id = (a) a; id(42) }</code></p>    <p>The scope of a let expression is the rest of the expressions in its enclosing sequence. That is <code>{let id = (a) a; id(42)}</code> can be thought of as <code>let id = (a) a in id(42)</code>.</p>  </li>  <li>    <p>tuples and strings are included in the grammar, but they’re not yet implemented</p>  </li></ul><p>Note that type annotations are not required. For clarity the programmer can annotate the types of let bound variables, functions parameters, and function return types using the <code>: T</code> syntax. For example <code>let id: (A) A = (a: A):A a</code>. Type annotations are not yet fully implemented, but it should be an easy feature to finish. At the moment there are not any situations that <em>require</em> annotations. I would like to add record types and corresponding accessor syntax such as <code>a.b</code> which will, as far as I know, require limited type annotations.</p><h3 id=\"c-language-bindings\">C Language Bindings</h3><p>Another type of function expression is <code>cfun</code>. These can be used any place an ordinary function expression can be used. <code>cfun</code> is used to create a binding to a function defined in C for doing IO and whatever else you would rather do in C. In the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/simple_io.ck\">example</a> there are two <code>cfun</code>s that are used to read and write characters on <code>stdout</code>/<code>stdin</code>. A <code>cfun</code> looks like <code>cfun id Type</code> where <code>id</code> is the identifier that matches the identifier of the function in C and <code>Type</code> is the type of that function. The <code>native_read</code> and <code>native_write</code> functions are implemented <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/builtin_cfuns.c\">here</a>. The file that defines the native functions must be compiled and linked with the output from ckc/cka (this is illustrated <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">here</a>).</p><h2 id=\"implementation\">Implementation</h2><p>The implementation of CK includes a compiler, assembler, and runtime.</p><h3 id=\"compiler\">Compiler</h3><p>The CK compiler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/\">ckc</a>) takes a single file (program.ck) and compiles it to a CK assembly file (program.cka). Compilation proceeds in a few steps:</p><ol>  <li>    <p>Parse program.ck using ANTLR4.</p>    <p>ANTLR4 generates the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/gen/\">classes</a> required to parse a CK file based on the grammar <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/grammar/ck.g4\">ck.g4</a>.</p>  </li>  <li>    <p>Convert the ast that is produced by ANTLR to a simpler ast that is easier to work with.</p>    <p>The class CkBaseVisitor (generated by ANTLR) is extended <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/grammar/visitors\">here</a> to convert the ANTLR generated ast into a <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/ast/node/\">simpler representation</a>. The CkBaseVisitor extensions are used to parse program.ck <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/grammar/Parse.kt\">here</a> and return the simpler ast.</p>  </li>  <li>    <p>Type check the program.</p>    <p>Type checking is implemented <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/analyze/Analyze.kt\">here</a>. The type checker is based on the example implementation at the end of <a href=\"http://lucacardelli.name/Papers/BasicTypechecking.pdf\">“Basic Polymorphic Typechecking” by Luca Cardelli</a>.</p>  </li>  <li>    <p>Compile the program.</p>    <p>Compilation is done by the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/ast/visitors/CompilationVisitor.kt\">CompilationVisitor</a> class. For now this amounts to visiting the ast and returning a list of assembler instructions.</p>  </li></ol><p>The <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/Cli.kt\">command line option parser</a> is used when ckc is invoked on the command line. It parses command line options, reads the input file, performs the compilation steps above, and writes the output to the specified output file.</p><h3 id=\"assembler\">Assembler</h3><p>The CK assembler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/\">cka</a>) takes a single program.cka file and converts it to a C99 file. The main task of the assembler is to convert the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/grammar/cka.g4\">abstract assembler syntax</a> into a list of concrete bytecodes and literal values to be consumed by the runtime vm. Part of cka’s task is to generate layout functions to be used by the memory management scheme to identify pointers on the stack and in heap allocated objects. Another thing that the assembler does is combine the program bytecode array, generated functions, and other supporting pieces together into a .c file with a <code>main</code> function that initializes the CK runtime and starts execution.</p><p>I won’t go into too much detail on cka here unless there is interest. It’s pretty boring and mostly self explanatory.</p><p>The output of cka must be compiled and linked with any files containing definitions of <code>cfun</code>s and with the chosen garbage collection implementation file (one of copying_gc.c, incremental_gc.c, or mark_compact_gc.c). Again, the example <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">makefile</a> demonstrates this.</p><h3 id=\"runtime\">Runtime</h3><p>The CK runtime is a simple bytecode interpreter combined with one of three tracing garbage collection implementations. I could have implemented CK by compiling directly to C, rather than using a vm, but I wanted to be able to support tail call optimization and I couldn’t see how to do that in plain C.</p><h4 id=\"vm\">VM</h4><p>The CK vm is implemented by <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/vm.h\">vm.h</a>. Opcodes are enumerated in the type <code>enum vm_op_code</code> and are reasonably well documented there. In addition to the usual arithmetic operations there are some for control flow, stack frame management, memory allocation, storing/loading values to/from indices into heap objects/stack frames/function arguments/function captures, and some other miscellaneous operations. Program execution is done by the function <code>vm_execute</code> which simply iterates over the given program array dispatching on each op code.</p><h4 id=\"memory-management\">Memory Management</h4><p>There are two copying collectors (one incremental) and one mark compact. I hope they can be used as examples for people who are curious about how garbage collection works. The garbage collectors all depend on <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/gc_interface.h\">gc_interface.h</a> which declares a common set of functions with which the vm can interface with the heap memory. There are probably subtle bugs in the implementations of the garbage collectors. I am most confident in the correctness of the simple copying collector, least confident in the incremental copying collector, and the mark compact collector is somewhere in between.</p><h2 id=\"future-work\">Future Work</h2><p>This is work that I would like to do on this project in the future.</p><ul>  <li>    <p>clean up, organize, and simplify: compiler, assembler, and runtime source files</p>  </li>  <li>    <p>integrate programmer type annotations with type checker</p>  </li>  <li>    <p>strings and tuples</p>  </li>  <li>    <p>pattern matching on instances of user defined types</p>  </li>  <li>    <p>modules</p>  </li>  <li>    <p>implement parser and CLI in Kotlin (removing ANTLR and Apache CLI dependencies)</p>  </li>  <li>    <p>implement compiler and assembler in functional language like ML (or at least in a functional style in Kotlin)</p>  </li>  <li>    <p>implement compiler and assembler in CK</p>  </li>  <li>    <p>generate machine code rather than C99</p>  </li>  <li>    <p>optimize polymorphic functions to not always use boxed types for integers</p>  </li>  <li>    <p>lots of other optimizations</p>  </li></ul><p>Thanks for making it this far! Let me know what you think with a comment below.</p>",
            "url": "http://localhost:4000/2019/04/17/copper-kitten",
            
            
            
            "tags": ["languages","cs","design"],
            
            "date_published": "2019-04-17T17:00:00-04:00",
            "date_modified": "2019-04-17T17:00:00-04:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2018/12/07/website-updates",
            "title": "website updates",
            "summary": null,
            "content_text": "PhotosThere are some really neat themes for Jekyll for all sorts of things. I found one for a photo gallery and set it up at colinholzman.xyz/photos. Not a lot of photos up there at the moment, but that’ll change.The theme I used is called Lens. It works similarly to default Jekyll. Put your photos in one place, run jekyll build and you’ll have the static site ready to serve, in my case, with app.use('/photos', express.static('/home/admin/photos'));.Resumecolinholzman.xyz/resume.pdf has a pdf of my resume. This is simplyconst resume = fs.readFileSync(path.join(__dirname, 'resume.pdf'));app.get('/resume.pdf', (req, res) =&gt; {    res.send(resume);});on the server.I should probably update my resume.WebcamI used an old USB webcam, a rasberry pi 3 B, and motionEyeOs to set up a stream of my backyard at colinholzman.xyz/cam. Download the latest image of motionEyeOs for your device from here. For a RPi burn the image on a sd card (I used etcher on my mac). Plug in the camera, insert the sd card, and connect the Pi to the network and power. Then go to the Pi’s address in your browser to set up all the options. There are a lot of options to configure but the camera and stream worked out of the box.I forwarded the video streaming port through my router and that enabled me to access the stream from the internet. On the colinholzman.xyz server I addedapp.get('/cam', (req, res) =&gt; {    res.sendFile(path.join(__dirname, 'cam.html'));});where cam.html just has an iframe pointing to my home router on the motionEyeOs streaming port. It seems to work OK. It doesn’t work over https though. I wonder why?",
            "content_html": "<h3 id=\"photos\">Photos</h3><p>There are some really neat themes for Jekyll for all sorts of things. I found one for a photo gallery and set it up at <a href=\"https://colinholzman.xyz/photos\">colinholzman.xyz/photos</a>. Not a lot of photos up there at the moment, but that’ll change.</p><p>The theme I used is called <a href=\"https://github.com/ElasticDesigns/jekyll-lens\">Lens</a>. It works similarly to default Jekyll. Put your photos in one place, run <code>jekyll build</code> and you’ll have the static site ready to serve, in my case, with <code>app.use('/photos', express.static('/home/admin/photos'));</code>.</p><h3 id=\"resume\">Resume</h3><p><a href=\"https://colinholzman.xyz/resume.pdf\">colinholzman.xyz/resume.pdf</a> has a pdf of my resume. This is simply</p><pre><code>const resume = fs.readFileSync(path.join(__dirname, 'resume.pdf'));app.get('/resume.pdf', (req, res) =&gt; {    res.send(resume);});</code></pre><p>on the server.</p><p>I should probably update my resume.</p><h3 id=\"webcam\">Webcam</h3><p>I used an old USB webcam, a rasberry pi 3 B, and <a href=\"https://github.com/ccrisan/motioneyeos\">motionEyeOs</a> to set up a stream of my backyard at <a href=\"http://colinholzman.xyz/cam\">colinholzman.xyz/cam</a>. Download the latest image of motionEyeOs for your device from <a href=\"https://github.com/ccrisan/motioneyeos/wiki/Supported-Devices\">here</a>. For a RPi burn the image on a sd card (I used etcher on my mac). Plug in the camera, insert the sd card, and connect the Pi to the network and power. Then go to the Pi’s address in your browser to set up all the options. There are a lot of options to configure but the camera and stream worked out of the box.</p><p>I forwarded the video streaming port through my router and that enabled me to access the stream from the internet. On the colinholzman.xyz server I added</p><pre><code>app.get('/cam', (req, res) =&gt; {    res.sendFile(path.join(__dirname, 'cam.html'));});</code></pre><p>where cam.html just has an iframe pointing to my home router on the motionEyeOs streaming port. It seems to work OK. It doesn’t work over https though. I wonder why?</p>",
            "url": "http://localhost:4000/2018/12/07/website-updates",
            
            
            
            
            
            "date_published": "2018-12-07T16:24:00-05:00",
            "date_modified": "2018-12-07T16:24:00-05:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2018/11/27/colinholzman-xyz",
            "title": "colinholzman.xyz",
            "summary": null,
            "content_text": "I’ve wanted to learn what it takes to run a website. Finally I’ve put together colinholzman.xyz. This is based on knowledge found all over the internet and through trial and error. It’s fitting to write down some instructions on how to reproduce it as the first post.get a host to serve your siteI used Amazon Lightsail for this. This site is currently running on the cheapest instance I could get (512 MB RAM, 1 vCPU, 20 GB SSD). It’s running Debian 8.domain nameBuy a domain name from someone like porkbun.com. Once you have an account you can create a record that will return the static ip that you assign to your server when someone asks for the address of colinholzman.xyz or whatever.install node.jsDo this in whatever way is typical for your os. I think Amazon has images with node already installed.install express, forever, and probably some other thingsnpm install expressnpm install forever...create a file server.jsHere is a simple static http server (a pretty trivial use of express I’m sure):// Dependenciesconst fs = require('fs');const http = require('http');const express = require('express');const app = express();app.use(express.static('/home/admin/site'))// Starting http serverconst httpServer = http.createServer(app);httpServer.listen(80, () =&gt; {    //console.log('HTTP Server running on port 80');});Run it like sudo forever start server.js. We want to use https though!Let’s EncryptIn order to get the nice secure looking green lock when you visit your site you’ll have to obtain some on-the-level ssl certificates. To do this we go to certbot.eff.org and download the certbot-auto tool. There are pretty solid instructions there. It comes down to running something like sudo ./path/to/certbot-auto certonly --webroot -d colinholzman.xyz. With the certificate generated make server.js look like this:// Dependenciesconst fs = require('fs');const https = require('https');const express = require('express');const app = express();// Certificateconst privateKey = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/privkey.pem', 'utf8');const certificate = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/cert.pem', 'utf8');const ca = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/chain.pem', 'utf8');const credentials = {    key: privateKey,    cert: certificate,    ca: ca};app.use(express.static('/home/admin/site'))// Starting https serverconst httpsServer = https.createServer(credentials, app);httpsServer.listen(443, () =&gt; {    //console.log('HTTPS Server running on port 443');});JekyllJekyll is a static website generator. It takes a bunch of markdown content and puts it into place using templates and creates the html and other stuff that gets served from /home/admin/site.",
            "content_html": "<p>I’ve wanted to learn what it takes to run a website. Finally I’ve put together <a href=\"https://colinholzman.xyz\">colinholzman.xyz</a>. This is based on knowledge found all over the internet and through trial and error. It’s fitting to write down some instructions on how to reproduce it as the first post.</p><h3 id=\"get-a-host-to-serve-your-site\">get a host to serve your site</h3><p>I used Amazon Lightsail for this. This site is currently running on the cheapest instance I could get (512 MB RAM, 1 vCPU, 20 GB SSD). It’s running Debian 8.</p><h3 id=\"domain-name\">domain name</h3><p>Buy a domain name from someone like <a href=\"https://porkbun.com\">porkbun.com</a>. Once you have an account you can create a record that will return the static ip that you assign to your server when someone asks for the address of colinholzman.xyz or whatever.</p><h3 id=\"install-nodejs\">install node.js</h3><p>Do this in whatever way is typical for your os. I think Amazon has images with node already installed.</p><h3 id=\"install-express-forever-and-probably-some-other-things\">install express, forever, and probably some other things</h3><p><code>npm install express</code><code>npm install forever</code><code>...</code></p><h3 id=\"create-a-file-serverjs\">create a file server.js</h3><p>Here is a simple static http server (a pretty trivial use of express I’m sure):</p><pre><code>// Dependenciesconst fs = require('fs');const http = require('http');const express = require('express');const app = express();app.use(express.static('/home/admin/site'))// Starting http serverconst httpServer = http.createServer(app);httpServer.listen(80, () =&gt; {    //console.log('HTTP Server running on port 80');});</code></pre><p>Run it like <code>sudo forever start server.js</code>. We want to use https though!</p><h3 id=\"lets-encrypt\">Let’s Encrypt</h3><p>In order to get the nice secure looking green lock when you visit your site you’ll have to obtain some on-the-level ssl certificates. To do this we go to <a href=\"https://certbot.eff.org/\">certbot.eff.org</a> and download the certbot-auto tool. There are pretty solid instructions there. It comes down to running something like <code>sudo ./path/to/certbot-auto certonly --webroot -d colinholzman.xyz</code>. With the certificate generated make <code>server.js</code> look like this:</p><pre><code>// Dependenciesconst fs = require('fs');const https = require('https');const express = require('express');const app = express();// Certificateconst privateKey = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/privkey.pem', 'utf8');const certificate = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/cert.pem', 'utf8');const ca = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/chain.pem', 'utf8');const credentials = {    key: privateKey,    cert: certificate,    ca: ca};app.use(express.static('/home/admin/site'))// Starting https serverconst httpsServer = https.createServer(credentials, app);httpsServer.listen(443, () =&gt; {    //console.log('HTTPS Server running on port 443');});</code></pre><h3 id=\"jekyll\">Jekyll</h3><p><a href=\"https://jekyllrb.com/\">Jekyll</a> is a static website generator. It takes a bunch of markdown content and puts it into place using templates and creates the html and other stuff that gets served from <code>/home/admin/site</code>.</p>",
            "url": "http://localhost:4000/2018/11/27/colinholzman-xyz",
            
            
            
            
            
            "date_published": "2018-11-27T07:00:00-05:00",
            "date_modified": "2018-11-27T07:00:00-05:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}